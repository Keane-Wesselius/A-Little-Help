import os
import discord
from discord.ext import commands
#from discord_slash import SlashCommand
import google.doc_creator as doc_creator
import webscraper.webScraper as scraper
import time
import threading
import asyncio
from datetime import datetime

TOKEN = open("/home/pi/Python/A-Little-Help/Token.txt", "r").readline()
BOT_LINK = open("/home/pi/Python/A-Little-Help/botAccessLink.txt", "r").readline()
EXTENSIONS = ['cogs.Math', 'cogs.Secret_Message']
GUILD = 'Davidamiright?'
SECRET_ERROR = "Spaghetti"

#intents=discord.Intents.all()
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix = '!', intents = intents)
#slash = SlashCommand(bot, sync_commands=True)


google = doc_creator.Doc_Creator()


####################################################################################################################################################################

@bot.event
async def on_ready():
    for guild in bot.guilds:
        if guild.name == GUILD:
            break    
    for extension in EXTENSIONS:
        await bot.load_extension(extension)
    print(f'{bot.user} is connected to the following guild')
    print(f'Guild Name: {guild.name}')
    print(f'Guild ID: {guild.id}')
    

###########################################################################################################################################################################################

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    if "a little help" in message.content.lower():
        #await message.channel.send("Did you need my help?\nType !help to see how I can assist you")
        gif_file = discord.File("/home/pi/Python/A-Little-Help/ALittleHelp.gif", filename="ALittleHelp.gif")
        embed = discord.Embed(title="Did you need my help?", description="\nType !help to see what I can do!", colour = discord.Colour.green())
        embed.set_image(url="attachment://ALittleHelp.gif")
        await message.channel.send(file=gif_file, embed=embed)

    if str(message.author) == "Chicken-Chan#7185":
        await message.add_reaction("\N{Chicken}")
    
    userFilePath = "/home/pi/Python/A-Little-Help/Users/" + str(message.author.id) + ".txt"
    if not os.path.exists(userFilePath):
        file = open(userFilePath, "w")
        file.write("0")
        file.close()
    file = open(userFilePath, "r")
    numPosts = int(file.readline())
    file.close()
    numPosts += 1
    file = open(userFilePath, "w")
    file.write(str(numPosts))
    file.close()
    
    await bot.process_commands(message)


######################################################################################################################################################################################


@bot.command()
#@slash.slash(name="ping", description="Gets bots ping")
async def ping(ctx):
    await ctx.send(f' Pong! {round(bot.latency * 1000)}ms')
    

######################################################################################################################################################################################


@bot.command()
#@slash.slash(name="info", description="Get IDs")
#@commands.is_owner()
async def info(ctx):
    await ctx.send(f'Bot Info = {bot.user} \nUser ID = {ctx.author}\nGuild Name = {ctx.guild} \nGuild ID = {ctx.guild.id}\nUse !help for help with commands')
    

###############################################################################################################################################################################



#delete default help command
bot.remove_command('help')

@bot.command(pass_context=True)
#@slash.slash(name="help", description="Shows all of bots functions")
async def help(ctx):
    embed = discord.Embed(colour = discord.Colour.green())
    embed.set_author(name='List of Commands')
    embed.add_field(name='!ping', value='Returns bot respond time in milliseconds', inline=False)
    embed.add_field(name='!info', value='Gives bot id, user id, guild name, and guild id', inline=False)
    embed.add_field(name='!add', value='Adds numbers, ex: !add 3 4', inline=False)
    embed.add_field(name='!sub', value='Subtracts numbers, ex: !sub 10 5', inline=False)
    embed.add_field(name='!mult', value='Multiplies numbers ex: !mult 4 5', inline=False)
    embed.add_field(name='!div', value='Divides numbers ex: !div 6 2', inline=False)
    embed.add_field(name='!encode', value='Converts text into nonsense that can be decoded using decode command ex: !encode hello', inline=False)
    embed.add_field(name='!decode', value='Converts nonsense generated by !encode back into the original message ex: !decode űŬũŨš', inline=False)
    embed.add_field(name='!createDoc', value='Creates a Google Doc and returns a link to the doc', inline=False)
    embed.add_field(name='!createSlide', value='Creates a Google Slide and returns a link to the slide', inline=False)
    embed.add_field(name='!createSheet', value='Creates a Google Sheet and returns a link to the sheet', inline=False)
    embed.add_field(name='!addBot', value='Displays a link to add the bot to another server', inline=False)
    embed.add_field(name='!youtube', value='Posts a link about a youtube video of your search query', inline=False)
    await ctx.send(embed=embed)


################################################################################################################################################################





###########################################################################################################################################


@bot.command()
#@slash.slash(name="createDoc", description="Creates a Google Doc file")
async def createDoc(ctx, *args):
    if (args):
        args = " ".join(args)
        url = google.createDoc(args)
        await ctx.send(url)
    else:
        url = google.createDoc()
        await ctx.send(url)


########################################################################################################################################################



@bot.command()
#@slash.slash(name="createSlide", description="Creates a Google Slide file")
async def createSlide(ctx, *args):
    if (args):
        args = " ".join(args)
        url = google.createSlide(args)
        await ctx.send(url)
    else:
        url = google.createSlide()
        await ctx.send(url)
    

###################################################################################################################################################################



@bot.command()
#@slash.slash(name="createSheet", description="Creates a Google Sheet file")
async def createSheet(ctx, *args):
    if (args):
        args = " ".join(args)
        url = google.createSheet(arg)
        await ctx.send(url)
    else:
        url = google.createSheet()
        await ctx.send(url)


##################################################################################################################################################################################

@bot.command()
async def youtube(ctx, *args):
    if (args):
        args = " ".join(args)
        url = scraper.getYoutubeVideo(args)
        if url:
            await ctx.send(url)
        else:
            await ctx.send("Oops I could'nt find a video for you...")
    else:
        url = scraper.getYoutubeVideo("muntjac")
        if url:
            await ctx.send(url)
        else:
            await ctx.send("Oops I could'nt find a video for you...")
##########################################################################################################################################################################



@bot.command()
#@slash.slash(name="addBot", description="Creates link to this add bot to a server")
async def addBot(ctx):
    await ctx.send(BOT_LINK)
    

################################################################################################################################################################################
date_format = '%m-%d-%Y %H:%M:%S'
example = '06-25-2023 13:00:00'

def timer(ctx, timeup, message):
    while True:
        if time.time() >= timeup:
            asyncio.run_coroutine_threadsafe(ctx.send("@everyone " + message), bot.loop)
            return

def timerAsyncWrapper(ctx, timeup, message):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    future = asyncio.ensure_future(timer(ctx, timeup, message)) # tasks to do
    loop.run_until_complete(future)

    #asyncio.get_event_loop().create_task(timer(ctx, timeup, message))

def startReminder(ctx, timestamp, timer_message):

    t = threading.Thread(target=timerAsyncWrapper, args=(ctx, timestamp, timer_message,))
    t.start()


def convertToTimestamp(date_string):
    #Turn date and time string into a datetime object
    date_time = datetime.strptime(date_string, date_format)
    # Convert the datetime object to a timestamp
    timestamp = datetime.timestamp(date_time)
    return timestamp

@bot.command()
async def reminder(ctx, date=None, time=None, *args):
    message = "Reminder"
    if date == None:
        await ctx.send("Date not specified")
        return
    if time == None:
        await ctx.send("Time not specified")
        return
    if (args):
        message = " ".join(args)
    

        
    date_string = date + " " + time
    try:
        timestamp = convertToTimestamp(date_string)
    except e:
        await ctx.send("Invalid date or time must be in the form M-D-Y H:M:S")
        return
    
    thread = threading.Thread(target=timer, args=(ctx, timestamp, message,))
    thread.start()
    await ctx.send("Reminder Created!")
    #startReminder(ctx, timestamp, message)
    


    





bot.run(TOKEN)
